---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: amazon-eks-cluster
  labels:
    provider: aws
    service: eks
    compute: managed
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: aws.jk8s.io/v1beta1
    kind: XEKSCluster

  patchSets:
    - name: common-parameters
      patches:
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.forProvider.region"
        - fromFieldPath: "spec.parameters.environment"
          toFieldPath: "spec.providerConfigRef.name"

  resources:

    - name: cluster-role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: controlplane
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "eks.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }
      patches:    
        - type: PatchSet
          patchSetName: common-parameters      
    
    - name: cluster-role-policy-attachment
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec: 
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane
      patches:    
        - type: PatchSet
          patchSetName: common-parameters

    - name: eks-cluster
      base:
        apiVersion: eks.aws.crossplane.io/v1beta1
        kind: Cluster
        spec:
          forProvider:
            resourcesVpcConfig:
              endpointPrivateAccess: true
              endpointPublicAccess: true
              subnetIdSelector:
                matchLabels:
                  type: subnet
            roleArnSelector:
              matchControllerRef: true
              matchLabels:
                role: controlplane
          writeConnectionSecretToRef:
            namespace: crossplane-system
      patches:    
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: "spec.parameters.k8s-version"
          toFieldPath: "spec.forProvider.version"
        - fromFieldPath: "metadata.uid"
          toFieldPath: "spec.writeConnectionSecretToRef.name"
          transforms:
            - type: string
              string:
                fmt: "%s-ekscluster-connection"
        - fromFieldPath: "spec.parameters.vpcName"
          toFieldPath: "spec.forProvider.resourcesVpcConfig.subnetIdSelector.matchLabels.vpc"
        - fromFieldPath: "spec.parameters.environment"
          toFieldPath: "spec.forProvider.resourcesVpcConfig.subnetIdSelector.matchLabels.environment"
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.identity.oidc.issuer
          toFieldPath: status.oidcIssuer
          transforms:
            - type: string
              string:
                type: TrimPrefix
                trim: 'https://'
        - type: ToCompositeFieldPath
          fromFieldPath: spec.writeConnectionSecretToRef.name
          toFieldPath: status.connectionSecretRefName
      connectionDetails:
        - name: cluster-ca
          fromConnectionSecretKey: clusterCA
        - name: apiserver-endpoint
          fromConnectionSecretKey: endpoint
        - name: value
          fromConnectionSecretKey: kubeconfig

    - name: openid-connect-provider
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: OpenIDConnectProvider
        spec:
          forProvider:
            clientIDList:
              - sts.amazonaws.com
      patches:    
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: status.oidcIssuer
          toFieldPath: spec.forProvider.url
          transforms:
            - type: string
              string:
                fmt: "https://%s"
        - fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.thumbprintList[0]
          transforms:
            - type: map
              map:
                ap-southeast-2: 9e99a48a9960b14926bb7f3b02e22da2b0ab7280

    - name: nodegroup-role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: nodegroup
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "ec2.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }
      patches:    
        - type: PatchSet
          patchSetName: common-parameters
    
    - name: nodegroup-role-policy-attachment-eks-worker
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec: 
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
      patches:    
        - type: PatchSet
          patchSetName: common-parameters

    - name: nodegroup-role-policy-attachment-cni
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec: 
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
      patches:    
        - type: PatchSet
          patchSetName: common-parameters

    - name: nodegroup-role-policy-attachment-ecr
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec: 
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
      patches:    
        - type: PatchSet
          patchSetName: common-parameters

    - name: eks-nodegroup
      base:
        apiVersion: eks.aws.crossplane.io/v1alpha1
        kind: NodeGroup
        spec:
          forProvider:
            instanceTypes: 
              - patched
            subnetSelector:
              matchControllerRef: false
              matchLabels:
                type: subnet
                visibility: private
            clusterNameSelector:
              matchControllerRef: true
            nodeRoleSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: "spec.parameters.minNodeCount"
          toFieldPath: "spec.forProvider.scalingConfig.minSize"
        - fromFieldPath: "spec.parameters.desiredNodeCount"
          toFieldPath: "spec.forProvider.scalingConfig.desiredSize"
        - fromFieldPath: "spec.parameters.maxNodeCount"
          toFieldPath: "spec.forProvider.scalingConfig.maxSize"
        - fromFieldPath: "spec.parameters.amiType"
          toFieldPath: "spec.forProvider.amiType"
        - fromFieldPath: "spec.parameters.instanceType"
          toFieldPath: "spec.forProvider.instanceTypes[0]"
        - fromFieldPath: "spec.parameters.vpcName"
          toFieldPath: "spec.forProvider.subnetSelector.matchLabels.vpc"
        - fromFieldPath: "spec.parameters.environment"
          toFieldPath: "spec.forProvider.subnetSelector.matchLabels.environment"          

    - name: cert-manager-sa-role
      base:
        apiVersion: aws.jk8s.io/v1beta1
        kind: XServiceAccountRole
        spec:
          parameters:
            namespace: cert-manager
            serviceAccount: cert-manager
      patches:    
        - fromFieldPath: "spec.parameters.environment"
          toFieldPath: "spec.parameters.environment.providerConfigName"
        - fromFieldPath: "spec.parameters.awsAccountNumber"
          toFieldPath: "spec.parameters.environment.awsAccountNumber"
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.parameters.environment.region"
        - fromFieldPath: "status.oidcIssuer"
          toFieldPath: "spec.parameters.oidcIssuer"
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.parameters.hostedZoneID
            strategy: string
            string:
              fmt: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "route53:ChangeResourceRecordSets",
                                "route53:ListResourceRecordSets"
                            ],
                            "Resource": "arn:aws:route53:::%s",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "route53:ListHostedZones",
                                "route53:ListHostedZonesByName"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": "route53:GetChange",
                            "Resource": "arn:aws:route53:::change/*",
                            "Effect": "Allow"
                        }
                    ]
                }
          toFieldPath: spec.parameters.policyDocument
          policy:
            fromFieldPath: Required
        - type: ToCompositeFieldPath
          fromFieldPath: status.roleARN
          toFieldPath: status.certManagerServiceAccountRoleARN

    - name: external-dns-sa-role
      base:
        apiVersion: aws.jk8s.io/v1beta1
        kind: XServiceAccountRole
        spec:
          parameters:
            namespace: external-dns
            serviceAccount: external-dns
      patches:    
        - fromFieldPath: "spec.parameters.environment"
          toFieldPath: "spec.parameters.environment.providerConfigName"
        - fromFieldPath: "spec.parameters.awsAccountNumber"
          toFieldPath: "spec.parameters.environment.awsAccountNumber"
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.parameters.environment.region"
        - fromFieldPath: "status.oidcIssuer"
          toFieldPath: "spec.parameters.oidcIssuer"
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.parameters.hostedZoneID
            strategy: string
            string:
              fmt: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "route53:ChangeResourceRecordSets",
                                "route53:ListResourceRecordSets"
                            ],
                            "Resource": "arn:aws:route53:::%s",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "route53:ListHostedZones",
                                "route53:ListHostedZonesByName"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": "route53:GetChange",
                            "Resource": "arn:aws:route53:::change/*",
                            "Effect": "Allow"
                        }
                    ]
                }
          toFieldPath: spec.parameters.policyDocument
          policy:
            fromFieldPath: Required
        - type: ToCompositeFieldPath
          fromFieldPath: status.roleARN
          toFieldPath: status.externalDNSServiceAccountRoleARN

    - name: argocd-external-secrets-sa-role
      base:
        apiVersion: aws.jk8s.io/v1beta1
        kind: XServiceAccountRole
        spec:
          parameters:
            namespace: jk8s
            serviceAccount: external-secrets
            policyDocument: |
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Action": [
                              "secretsmanager:GetResourcePolicy",
                              "secretsmanager:GetSecretValue",
                              "secretsmanager:DescribeSecret",
                              "secretsmanager:ListSecretVersionIds"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      }
                  ]
              }              
      patches:    
        - fromFieldPath: "spec.parameters.environment"
          toFieldPath: "spec.parameters.environment.providerConfigName"
        - fromFieldPath: "spec.parameters.awsAccountNumber"
          toFieldPath: "spec.parameters.environment.awsAccountNumber"
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.parameters.environment.region"
        - fromFieldPath: "status.oidcIssuer"
          toFieldPath: "spec.parameters.oidcIssuer"
        - type: ToCompositeFieldPath
          fromFieldPath: status.roleARN
          toFieldPath: status.argocdExternalSecretsServiceAccountRoleARN

    - name: telemetry-external-secrets-sa-role
      base:
        apiVersion: aws.jk8s.io/v1beta1
        kind: XServiceAccountRole
        spec:
          parameters:
            namespace: telemetry
            serviceAccount: external-secrets
            policyDocument: |
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Action": [
                              "secretsmanager:GetResourcePolicy",
                              "secretsmanager:GetSecretValue",
                              "secretsmanager:DescribeSecret",
                              "secretsmanager:ListSecretVersionIds"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      }
                  ]
              }              
      patches:    
        - fromFieldPath: "spec.parameters.environment"
          toFieldPath: "spec.parameters.environment.providerConfigName"
        - fromFieldPath: "spec.parameters.awsAccountNumber"
          toFieldPath: "spec.parameters.environment.awsAccountNumber"
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.parameters.environment.region"
        - fromFieldPath: "status.oidcIssuer"
          toFieldPath: "spec.parameters.oidcIssuer"
        - type: ToCompositeFieldPath
          fromFieldPath: status.roleARN
          toFieldPath: status.telemetryExternalSecretsServiceAccountRoleARN

    - name: app-external-secrets-sa-role
      base:
        apiVersion: aws.jk8s.io/v1beta1
        kind: XServiceAccountRole
        spec:
          parameters:
            namespace: app
            serviceAccount: external-secrets
            policyDocument: |
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Action": [
                              "secretsmanager:GetResourcePolicy",
                              "secretsmanager:GetSecretValue",
                              "secretsmanager:DescribeSecret",
                              "secretsmanager:ListSecretVersionIds"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      }
                  ]
              }              
      patches:    
        - fromFieldPath: "spec.parameters.environment"
          toFieldPath: "spec.parameters.environment.providerConfigName"
        - fromFieldPath: "spec.parameters.awsAccountNumber"
          toFieldPath: "spec.parameters.environment.awsAccountNumber"
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.parameters.environment.region"
        - fromFieldPath: "status.oidcIssuer"
          toFieldPath: "spec.parameters.oidcIssuer"
        - type: ToCompositeFieldPath
          fromFieldPath: status.roleARN
          toFieldPath: status.appExternalSecretsServiceAccountRoleARN

    - name: crossplane-external-secrets-sa-role
      base:
        apiVersion: aws.jk8s.io/v1beta1
        kind: XServiceAccountRole
        spec:
          parameters:
            namespace: crossplane-system
            serviceAccount: external-secrets
            policyDocument: |
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Action": [
                              "secretsmanager:GetResourcePolicy",
                              "secretsmanager:GetSecretValue",
                              "secretsmanager:DescribeSecret",
                              "secretsmanager:ListSecretVersionIds"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      }
                  ]
              }              
      patches:    
        - fromFieldPath: "spec.parameters.environment"
          toFieldPath: "spec.parameters.environment.providerConfigName"
        - fromFieldPath: "spec.parameters.awsAccountNumber"
          toFieldPath: "spec.parameters.environment.awsAccountNumber"
        - fromFieldPath: "spec.parameters.region"
          toFieldPath: "spec.parameters.environment.region"
        - fromFieldPath: "status.oidcIssuer"
          toFieldPath: "spec.parameters.oidcIssuer"
        - type: ToCompositeFieldPath
          fromFieldPath: status.roleARN
          toFieldPath: status.crossplaneExternalSecretsServiceAccountRoleARN


    - name: helm-provider
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              namespace: crossplane-system
              key: kubeconfig
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
        - fromFieldPath: "metadata.uid"
          toFieldPath: spec.credentials.secretRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-ekscluster-connection"
      readinessChecks:
        - type: None

    - name: bootstrap-chart
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        metadata:
          annotations: 
            crossplane.io/external-name: bootstrap
        spec:
          forProvider:
            chart:
              name: bootstrap
              repository: https://jdotw.github.io/jk8s
            namespace: jk8s
            values:
              platform:
                crossplane:
                  kubernetes:
                    enabled: true
                dns:
                  fqdn: PATCHED
                  externalDNS:
                    enabled: true
                    zoneID: PATCHED
                tls:
                  certManager:
                    enabled: true
                    email: PATCHED
                    selfSigned:
                      enabled: false
                    letsEncrypt:
                      staging:
                        enabled: true
                        email: PATCHED
                        route53:
                          zoneID: PATCHED
                secrets:
                  externalSecrets:
                    enabled: true
                    rdsSecretName: ${RDS_SECRET}
                telemetry:
                  jaeger:
                    storage:
                      es:
                        enabled: true
                        url: https://${ES_DOMAIN_ENDPOINT}
                        credentialsSecretName: ${ES_SECRET}
                      inMemory:
                        enabled: false
                apps:
                  - name: apps
                    repoURL: PATCHED
                    targetRevision: HEAD
                    path: charts/apps
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
        - fromFieldPath: spec.parameters.fqdn
          toFieldPath: spec.forProvider.values.platform.dns.fqdn   
        - fromFieldPath: status.externalDNSServiceAccountRoleARN
          toFieldPath: spec.forProvider.values.platform.dns.externalDNS.aws.serviceAccountARN
        - fromFieldPath: spec.parameters.hostedZoneID
          toFieldPath: spec.forProvider.values.platform.dns.externalDNS.zoneID
          transforms:
            - type: string
              string:
                type: TrimPrefix
                trim: 'hostedzone/'
        - fromFieldPath: spec.parameters.fqdn
          toFieldPath: spec.forProvider.values.platform.tls.certManager.email
          transforms:
            - type: string
              string:
                fmt: "admin@%s"
        - fromFieldPath: spec.parameters.fqdn
          toFieldPath: spec.forProvider.values.platform.tls.certManager.letsEncrypt.staging.email
          transforms:
            - type: string
              string:
                fmt: "admin@%s"
        - fromFieldPath: status.certManagerServiceAccountRoleARN
          toFieldPath: spec.forProvider.values.platform.tls.certManager.aws.serviceAccountRoleARN
        - fromFieldPath: spec.parameters.hostedZoneID
          toFieldPath: spec.forProvider.values.platform.tls.certManager.letsEncrypt.staging.route53.zoneID
          transforms:
            - type: string
              string:
                type: TrimPrefix
                trim: 'hostedzone/'
        - fromFieldPath: spec.parameters.rdsSecretName
          toFieldPath: spec.forProvider.values.platform.secrets.externalSecrets.rdsSecretName
        - fromFieldPath: spec.parameters.rdsEndpoint
          toFieldPath: spec.forProvider.values.platform.rds.host
        - fromFieldPath: spec.parameters.privateRepository.name
          toFieldPath: spec.forProvider.values.platform.privateRepositories[0].name
        - fromFieldPath: spec.parameters.privateRepository.url
          toFieldPath: spec.forProvider.values.platform.privateRepositories[0].url
        - fromFieldPath: spec.parameters.privateRepository.externalSecret.name
          toFieldPath: spec.forProvider.values.platform.privateRepositories[0].externalSecret.name
        - fromFieldPath: status.argocdExternalSecretsServiceAccountRoleARN
          toFieldPath: spec.forProvider.values.platform.secrets.externalSecrets.aws.secretsManager.argocdServiceAccountRoleARN
        - fromFieldPath: status.telemetryExternalSecretsServiceAccountRoleARN
          toFieldPath: spec.forProvider.values.platform.secrets.externalSecrets.aws.secretsManager.telemetryServiceAccountRoleARN
        - fromFieldPath: status.appExternalSecretsServiceAccountRoleARN
          toFieldPath: spec.forProvider.values.platform.secrets.externalSecrets.aws.secretsManager.appServiceAccountRoleARN
        - fromFieldPath: status.crossplaneExternalSecretsServiceAccountRoleARN
          toFieldPath: spec.forProvider.values.platform.secrets.externalSecrets.aws.secretsManager.crossplaneServiceAccountRoleARN
        - fromFieldPath: spec.parameters.appsRepoURL
          toFieldPath: spec.forProvider.values.platform.apps[0].repoURL
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.parameters.hostedZoneID
              - fromFieldPath: spec.parameters.fqdn
              - fromFieldPath: spec.parameters.repository.owner
              - fromFieldPath: spec.parameters.repository.org
            strategy: string
            string:
              fmt: |
                environment:
                  hostedZoneID: %s
                  hostedZoneName: %s
                repository:
                  owner: %s
                  org: %s
          toFieldPath: spec.forProvider.values.platform.apps[0].values
          policy:
            fromFieldPath: Required
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.parameters.name
              - fromFieldPath: metadata.uid
            strategy: string
            string:
              fmt: "%s-eks-conn-%s"
          toFieldPath: spec.forProvider.values.platform.crossplane.kubernetes.connectionSecretName
          policy:
            fromFieldPath: Required
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.parameters.name
              - fromFieldPath: metadata.uid
            strategy: string
            string:
              fmt: "%s-eks-conn-%s"
          toFieldPath: spec.forProvider.values.platform.crossplane.kubernetes.externalSecretName
          policy:
            fromFieldPath: Required

    - name: cluster-connection-secret
      base:
        apiVersion: secretsmanager.aws.crossplane.io/v1alpha1
        kind: Secret
        spec:
          forProvider:
            stringSecretRef:
              namespace: crossplane-system
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: spec.parameters.environment
          toFieldPath: spec.providerConfigRef.name
        - fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
        - fromFieldPath: status.connectionSecretRefName
          toFieldPath: spec.forProvider.stringSecretRef.name
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.parameters.name
              - fromFieldPath: metadata.uid
            strategy: string
            string:
              fmt: "%s-eks-conn-%s"
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          policy:
            fromFieldPath: Required            
